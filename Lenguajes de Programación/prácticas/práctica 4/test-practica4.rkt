#lang plai

(print-only-errors)

(require "grammars.rkt")
(require "parser.rkt")
(require "desugar.rkt")
(require "interp.rkt")

;; DefiniciÃ³n de expresiones.

(define expr1  'foo)
(define expr2  1729)
(define expr3  '{+ 1 2 3})
(define expr4  '{- 1 2 3})
(define expr5  '{* 1 2 3})
(define expr6  '{/ 1 2 3})
(define expr7  '{modulo 9 3})
(define expr8  '{expt 2 3})
(define expr9  '{add1 17})
(define expr10 '{sub1 29})
(define expr11 '{with {{a 2} {b 3}}
                  {+ a b}})
(define expr12 '{with {{a 2} {b {+ a a}}}
                  b})
(define expr13 '{with* {{a 2} {b {+ a a}}}
                  b})
(define expr14 '{with {{a a}}
                  a})
(define expr15 '{with {{b a}}
                  a})
(define expr16 '{fun {b h} {/ {* b h} 2}})
(define expr17 '{{fun {b h} {/ {* b h} 2}} 10 2})

;; Pruebas parser :: parse
(test (parse expr1) (idS 'foo))
(test (parse expr2) (numS 1729))
(test (parse expr3) (opS + (list (numS 1) (numS 2) (numS 3))))
(test (parse expr4) (opS - (list (numS 1) (numS 2) (numS 3))))
(test (parse expr5) (opS * (list (numS 1) (numS 2) (numS 3))))
(test (parse expr6) (opS / (list (numS 1) (numS 2) (numS 3))))
(test (parse expr7) (opS modulo (list (numS 9) (numS 3))))
(test (parse expr8) (opS expt (list (numS 2) (numS 3))))
(test (parse expr9) (opS add1 (list (numS 17))))
(test (parse expr10) (opS sub1 (list (numS 29))))
(test (parse expr11) 
      (withS (list (binding 'a (numS 2)) (binding 'b (numS 3))) (opS + (list (idS 'a) (idS 'b)))))
(test (parse expr12)
      (withS (list (binding 'a (numS 2)) (binding 'b (opS + (list (idS 'a) (idS 'a))))) (idS 'b)))
(test (parse expr13)
      (withS* (list (binding 'a (numS 2)) (binding 'b (opS + (list (idS 'a) (idS 'a))))) (idS 'b)))
(test (parse expr14)
      (withS (list (binding 'a (idS 'a))) (idS 'a)))
(test (parse expr15)
      (withS (list (binding 'b (idS 'a))) (idS 'a)))
(test (parse expr16)
      (funS '(b h) (opS / (list (opS * (list (idS 'b) (idS 'h))) (numS 2)))))
(test (parse expr17)
      (appS (parse expr16) (list (numS 10) (numS 2))))

;; Pruebas desugar :: desugar
(test (desugar (parse expr1)) (id 'foo))
(test (desugar (parse expr2)) (num 1729))
(test (desugar (parse expr3)) (op + (list (num 1) (num 2) (num 3))))
(test (desugar (parse expr4)) (op - (list (num 1) (num 2) (num 3))))
(test (desugar (parse expr5)) (op * (list (num 1) (num 2) (num 3))))
(test (desugar (parse expr6)) (op / (list (num 1) (num 2) (num 3))))
(test (desugar (parse expr7)) (op modulo (list (num 9) (num 3))))
(test (desugar (parse expr8)) (op expt (list (num 2) (num 3))))
(test (desugar (parse expr9)) (op add1 (list (num 17))))
(test (desugar (parse expr10)) (op sub1 (list (num 29))))
(test (desugar (parse expr11)) 
      (app (app (fun 'a (fun 'b (op + (list (id 'a) (id 'b))))) (num 2)) (num 3)))
(test (desugar (parse expr12)) 
      (app (app (fun 'a (fun 'b (id 'b))) (num 2)) (op + (list (id 'a) (id 'a)))))
(test (desugar (parse expr13)) 
      (app (fun 'a (app (fun 'b (id 'b)) (op + (list (id 'a) (id 'a))))) (num 2)))
(test (desugar (parse expr14)) (app (fun 'a (id 'a)) (id 'a)))
(test (desugar (parse expr15)) (app (fun 'b (id 'a)) (id 'a)))
(test (desugar (parse expr16)) 
      (fun 'b (fun 'h (op / (list (op * (list (id 'b) (id 'h))) (num 2))))))
(test (desugar (parse expr17))
      (app (app (fun 'b (fun 'h (op / (list (op * (list (id 'b) (id 'h))) (num 2))))) (num 10)) 
           (num 2)))

;; Pruebas interp :: interp
(test/exn (interp (desugar (parse expr1)) (mtSub)) "Variable libre")
(test (interp (desugar (parse expr2)) (mtSub)) (numV 1729))
(test (interp (desugar (parse expr3)) (mtSub)) (numV 6))
(test (interp (desugar (parse expr4)) (mtSub)) (numV -4))
(test (interp (desugar (parse expr5)) (mtSub)) (numV 6))
(test (interp (desugar (parse expr6)) (mtSub)) (numV 1/6))
(test (interp (desugar (parse expr7)) (mtSub)) (numV 0))
(test (interp (desugar (parse expr8)) (mtSub)) (numV 8))
(test (interp (desugar (parse expr9)) (mtSub)) (numV 18))
(test (interp (desugar (parse expr10)) (mtSub)) (numV 28))
(test (interp (desugar (parse expr11)) (mtSub)) (numV 5))
(test/exn (interp (desugar (parse expr12)) (mtSub)) "Variable libre")
(test (interp (desugar (parse expr13)) (mtSub)) (numV 4))
(test/exn (interp (desugar (parse expr14)) (mtSub)) "Variable libre")
(test/exn (interp (desugar (parse expr15)) (mtSub)) "Variable libre")
(test (interp (desugar (parse expr16)) (mtSub)) 
      (closureV 'b (fun 'h (op / (list (op * (list (id 'b) (id 'h))) (num 2)))) (mtSub)))
(test (interp (desugar (parse expr17)) (mtSub)) (numV 10))
